// <auto-generated />
using System;
using FlowerShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowerShop.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240108193055_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowerShop.Models.Bouquet", b =>
                {
                    b.Property<int>("BouquetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BouquetId"));

                    b.Property<float>("BouquetCost")
                        .HasColumnType("real");

                    b.Property<string>("BouquetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BouquetId");

                    b.ToTable("Bouquets");
                });

            modelBuilder.Entity("FlowerShop.Models.BouquetFlower", b =>
                {
                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("FlowerId")
                        .HasColumnType("int");

                    b.HasKey("BouquetId", "FlowerId");

                    b.HasIndex("FlowerId");

                    b.ToTable("BouquetFlowers");
                });

            modelBuilder.Entity("FlowerShop.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FlowerShop.Models.Flower", b =>
                {
                    b.Property<int>("FlowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlowerId"));

                    b.Property<float>("FlowerCost")
                        .HasColumnType("real");

                    b.Property<int>("FlowerCount")
                        .HasColumnType("int");

                    b.Property<string>("FlowerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowerId");

                    b.ToTable("Flowers");
                });

            modelBuilder.Entity("FlowerShop.Models.Gift", b =>
                {
                    b.Property<int>("GiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("GiftCost")
                        .HasColumnType("real");

                    b.Property<string>("GiftName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GiftId");

                    b.ToTable("Gifts");
                });

            modelBuilder.Entity("FlowerShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderSum")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FlowerShop.Models.OrderBouquet", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("BouquetId")
                        .HasColumnType("int");

                    b.Property<int>("BouquetCount")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "BouquetId");

                    b.HasIndex("BouquetId");

                    b.ToTable("OrderBouquets");
                });

            modelBuilder.Entity("FlowerShop.Models.OrderGift", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("GiftId")
                        .HasColumnType("int");

                    b.Property<int>("GiftCount")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "GiftId");

                    b.HasIndex("GiftId");

                    b.ToTable("OrderGifts");
                });

            modelBuilder.Entity("FlowerShop.Models.BouquetFlower", b =>
                {
                    b.HasOne("FlowerShop.Models.Bouquet", "Bouquet")
                        .WithMany("BouquetsFlowers")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerShop.Models.Flower", "Flower")
                        .WithMany("BouquetsFlowers")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bouquet");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("FlowerShop.Models.Order", b =>
                {
                    b.HasOne("FlowerShop.Models.Client", null)
                        .WithMany("Orders")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("FlowerShop.Models.OrderBouquet", b =>
                {
                    b.HasOne("FlowerShop.Models.Bouquet", "Bouquet")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("BouquetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerShop.Models.Order", "Order")
                        .WithMany("OrderBouquets")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bouquet");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerShop.Models.OrderGift", b =>
                {
                    b.HasOne("FlowerShop.Models.Gift", "Gift")
                        .WithMany("OrderGifts")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerShop.Models.Order", "Order")
                        .WithMany("OrderGifts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerShop.Models.Bouquet", b =>
                {
                    b.Navigation("BouquetsFlowers");

                    b.Navigation("OrderBouquets");
                });

            modelBuilder.Entity("FlowerShop.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FlowerShop.Models.Flower", b =>
                {
                    b.Navigation("BouquetsFlowers");
                });

            modelBuilder.Entity("FlowerShop.Models.Gift", b =>
                {
                    b.Navigation("OrderGifts");
                });

            modelBuilder.Entity("FlowerShop.Models.Order", b =>
                {
                    b.Navigation("OrderBouquets");

                    b.Navigation("OrderGifts");
                });
#pragma warning restore 612, 618
        }
    }
}
